import com.badlogicgames.packr.PackrConfig
import com.badlogicgames.packr.Packr

buildscript {
    ext.kotlin_version = "1.2.71"

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "edu.sc.seis.gradle:launch4j:2.4.4"
        classpath "com.github.libgdx:packr:master-SNAPSHOT"
    }
}

plugins {
    id "java"
    id "application"
}

group "rceditor"
version "1.0"

apply plugin: "kotlin"
apply plugin: "edu.sc.seis.launch4j"

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "no.tornado:tornadofx:1.7.17"

    compile "io.reactivex.rxjava2:rxkotlin:2.2.0"
    compile "com.github.thomasnield:rxkotlinfx:2.2.2"

    compile "com.jfoenix:jfoenix:8.0.7"

    compile "de.jensd:fontawesomefx-commons:8.15"
    compile "de.jensd:fontawesomefx-materialicons:2.2.0-5"

    compile "com.github.WycliffeAssociates:kotlin-resource-container:-SNAPSHOT"

    testCompile group: "junit", name: "junit", version: "4.12"
}

task deployLinux {
    doLast {
        new Packr().main("packr-config/linux.json")
    }
}

task deployWin {
    doLast {
        new Packr().main("packr-config/win.json")
    }
}

task deployMac {
    doLast {
        new Packr().main("packr-config/macos.json")
    }
}

task deployAll {
    doLast {

    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

mainClassName = "org.wa.rceditor.application.MyAppKt"

launch4j {
    mainClassName = mainClassName
    icon = "${projectDir}/icon.ico"
    outfile = "rceditor.exe"
    productName = "RC Editor"
}

jar {
    manifest {
        attributes(
                "Class-Path": configurations.compile.collect { it.getName() }.join(" "),
                "Main-Class": mainClassName
        )
    }
    from (configurations.compile.collect { zipTree(it) }) {
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

deployWin.dependsOn build
deployLinux.dependsOn build
deployMac.dependsOn build
deployAll.dependsOn(deployWin, deployLinux, deployMac)